/*jshint onevar:false *///for node
var crossroads=crossroads||require("../../../dist/crossroads");describe("crossroads.addRoute()",function(){beforeEach(function(){crossroads.removeAllRoutes();crossroads.resetState()});afterEach(function(){crossroads.removeAllRoutes();crossroads.resetState()});it("should return a route and attach it to crossroads",function(){var e=crossroads.addRoute("/{foo}");expect(e).toBeDefined();expect(e.rules).toBeUndefined();expect(crossroads.getNumRoutes()).toBe(1);expect(e.matched.getNumListeners()).toBe(0)});it("should add listener to matched if provided",function(){var e=crossroads.addRoute("/{foo}",function(){expect().toBe("shouldnt be called")});expect(e).toBeDefined();expect(e.rules).toBeUndefined();expect(crossroads.getNumRoutes()).toBe(1);expect(e.matched.getNumListeners()).toBe(1)});it("should accept RegExp",function(){var e=crossroads.addRoute(/^foo\/([a-z]+)$/,function(){expect().toBe("shouldnt be called")});expect(e).toBeDefined();expect(e.rules).toBeUndefined();expect(crossroads.getNumRoutes()).toBe(1);expect(e.matched.getNumListeners()).toBe(1)});it("should increment num routes",function(){var e=crossroads.addRoute(/^foo\/([a-z]+)$/,function(){expect().toBe("shouldnt be called")}),t=crossroads.addRoute("/{foo}",function(){expect().toBe("shouldnt be called")});expect(e).toBeDefined();expect(t).toBeDefined();expect(e.rules).toBeUndefined();expect(t.rules).toBeUndefined();expect(crossroads.getNumRoutes()).toBe(2);expect(e.matched.getNumListeners()).toBe(1);expect(t.matched.getNumListeners()).toBe(1)});it("should work on multiple instances",function(){var e=crossroads.addRoute("/bar"),t=crossroads.create(),n=t.addRoute("/ipsum");expect(e).toBeDefined();expect(n).toBeDefined();expect(e.rules).toBeUndefined();expect(n.rules).toBeUndefined();expect(crossroads.getNumRoutes()).toBe(1);expect(t.getNumRoutes()).toBe(1);expect(e.matched.getNumListeners()).toBe(0);expect(n.matched.getNumListeners()).toBe(0)})});